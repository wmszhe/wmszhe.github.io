<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wmszhe.github.io/</id>
    <title>zhe&apos;s home</title>
    <updated>2019-07-04T04:01:13.932Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wmszhe.github.io/"/>
    <link rel="self" href="https://wmszhe.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wmszhe.github.io//images/avatar.png</logo>
    <icon>https://wmszhe.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, zhe&apos;s home</rights>
    <entry>
        <title type="html"><![CDATA[算法复杂度]]></title>
        <id>https://wmszhe.github.io//post/suan-fa-fu-za-du</id>
        <link href="https://wmszhe.github.io//post/suan-fa-fu-za-du">
        </link>
        <updated>2019-07-04T03:45:52.000Z</updated>
        <summary type="html"><![CDATA[<p>算法复杂度</p>
]]></summary>
        <content type="html"><![CDATA[<p>算法复杂度</p>
<!-- more -->
<h1 id="算法的复杂度">算法的复杂度</h1>
<blockquote>
<p>解决的是“快”和“省”的问题</p>
</blockquote>
<blockquote>
<p>参考： <a href="https://time.geekbang.org/column/article/40036">复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</a></p>
</blockquote>
<blockquote>
<p>参考：<a href="https://time.geekbang.org/column/article/40447">复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</a></p>
</blockquote>
<h2 id="时间复杂度">时间复杂度</h2>
<blockquote>
<p>时间复杂度的全称是<strong>渐进时间复杂度,表示算法的执行时间与数据规模之间的增长关系</strong>。</p>
</blockquote>
<h3 id="大-o-复杂度表示法">大 O 复杂度表示法</h3>
<blockquote>
<p>算法的执行效率，粗略地讲，就是算法代码执行的时间</p>
</blockquote>
<blockquote>
<p>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。</p>
</blockquote>
<p>比如如下代码，粗略估计执行时间</p>
<pre><code>int cal(int n) {
    int sum = 0;
    int i = 1;
    for (; i &lt;= n; ++i) {
        sum = sum + i;
    }
    return sum;
}
</code></pre>
<p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢</p>
<p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 <em>2n*unit_time</em> 的执行时间，所以这段代码总的执行时间就是 <strong>(2n+2)*unit_time</strong>。可以看出来，</p>
<blockquote>
<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong>。</p>
</blockquote>
<p>再看下这段代码</p>
<pre><code>int cal(int n) {
    int sum = 0;  // 1
    int i = 1;  // 1
    int j = 1;  // 1
    for (; i &lt;= n; ++i) {  // n
        j = 1; // n
        for (; j &lt;= n; ++j) {  // n^2
            sum = sum + i * j;  // n^2
        }
    }
}
</code></pre>
<p>可以得出，复杂度为T(n) = (2n^2+2n+3)*unit_time。</p>
<p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，</p>
<blockquote>
<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong></p>
</blockquote>
<p><strong>总结为：</strong></p>
<p><img src="https://wmszhe.github.io//post-images/22900968aa2b190072c985a08b0e92ef.png" alt=""></p>
<p>T(n)表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。</p>
<p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n^2+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong></p>
<p>当 n 很大时，你可以把它想象成 10000、100000。而<strong>公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略</strong>。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n^2)。</p>
<h3 id="如何分析时间复杂度">如何分析时间复杂度</h3>
<ul>
<li>
<ol>
<li>只关注循环执行次数最多的一段代码</li>
</ol>
<blockquote>
<p>大 O 这种复杂度表示方法只是表示一种变化趋势。<strong>我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了</strong>。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。</p>
</blockquote>
<p>第一段代码，其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第 4、5 行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。</p>
<p>即：第一段代码，时间复杂度为O(n), 第二段代码，时间复杂度为O(n^2)</p>
</li>
<li>
<ol start="2">
<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
</ol>
<pre><code>int cal(int n) {
    int sum_1 = 0;
    int p = 1;
    for (; p &lt; 100; ++p) {
        sum_1 = sum_1 + p;
    }

    int sum_2 = 0;
    int q = 1;
    for (; q &lt; n; ++q) {
        sum_2 = sum_2 + q;
    }

    int sum_3 = 0;
    int i = 1;
    int j = 1;
    for (; i &lt;= n; ++i) {
        j = 1;
        for (; j &lt;= n; ++j) {
            sum_3 = sum_3 + i * j;
        }
    }

    return sum_1 + sum_2 + sum_3;
}
</code></pre>
<blockquote>
<p>上述代码3部分后2部分时间复杂度分别为O(n), O(n^2)，我们取其中最大的量级,即O(n^2).</p>
</blockquote>
<p>抽象成公式,为：</p>
<blockquote>
<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).</p>
</blockquote>
</li>
<li>
<p>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p>
<blockquote>
<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).</p>
</blockquote>
<pre><code>int cal(int n) {
    int ret = 0;
    int i = 1;
    for (; i &lt; n; ++i) {
        ret = ret + f(i);
    }
}

int f(int n) {
    int sum = 0;
    int i = 1;
    for (; i &lt; n; ++i) {
        sum = sum + i;
    }
    return sum;
}
</code></pre>
<blockquote>
<p>T(n) = T1(n) * T2(n) = O(n*n) = O(n^2)</p>
</blockquote>
</li>
</ul>
<h3 id="几种常见的时间复杂度">几种常见的时间复杂度</h3>
<p><img src="https://wmszhe.github.io//post-images/3723793cc5c810e9d5b06bc95325bf0a.jpg" alt=""></p>
<p>对于上述罗列的复杂度量级，我们可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。其中，非多项式量级只有两个：O(2^n) 和 O(n!)。</p>
<ul>
<li>
<ol>
<li>O(1)</li>
</ol>
<p>首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。</p>
<pre><code>int i = 8;
int j = 6;
int sum = i + j;
</code></pre>
<p>稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，</p>
<blockquote>
<p><strong>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong></p>
</blockquote>
</li>
<li>
<ol start="2">
<li>O(logn)、O(nlogn)</li>
</ol>
<p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度</p>
<pre><code>i = 1;
while (i &lt;= n) {
    i = i * 2;
}
</code></pre>
<p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的</p>
<blockquote>
<p>2^0 2^1 2^2 ... (2^x=n)</p>
</blockquote>
<p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2^x=n 求解x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)</p>
<pre><code>i = 1;
while (i &lt;= n)  {
    i = i * 3;
}
</code></pre>
<p>根据刚刚的思路，很简单就能看出来，这段代码的时间复杂度为 O(log<sub>3</sub>n)。</p>
<p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p>
<p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n 就等于 log<sub>3</sub>2 * log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C *  log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。基于我们前面的一个理论：<strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于 O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)</p>
<blockquote>
<p>换底公式</p>
</blockquote>
<blockquote>
<p>log<sub>3</sub>2 * log<sub>2</sub>n =  log<sub>3</sub>2 * (log<sub>3</sub>n / log<sub>3</sub>2) = log<sub>3</sub>n</p>
</blockquote>
<p>如果你理解O(logn)，那 O(nlogn) 就很容易理解了。根据乘法法则，如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p>
</li>
<li>
<ol start="3">
<li>O(m+n)、O(m*n)</li>
</ol>
<p>不一样的时间复杂度，代码的复杂度<strong>由两个数据的规模</strong>来决定。</p>
<pre><code>int cal(int m, int n) {
    int sum_1 = 0;
    int i = 1;
    for (; i &lt; m; ++i) {
      sum_1 = sum_1 + i;
    }
  
    int sum_2 = 0;
    int j = 1;
    for (; j &lt; n; ++j) {
      sum_2 = sum_2 + j;
    }
  
    return sum_1 + sum_2;
}
</code></pre>
<p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)</p>
<blockquote>
<p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。</p>
</blockquote>
</li>
</ul>
<h3 id="稍微复杂一点的复杂度分析">稍微复杂一点的复杂度分析</h3>
<blockquote>
<p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入新的概念</p>
</blockquote>
<ul>
<li>
<ol>
<li>最好情况时间复杂度(best case time complexity)</li>
</ol>
<blockquote>
<p>在最理想的情况下，执行这段代码的时间复杂度</p>
</blockquote>
</li>
<li>
<ol start="2">
<li>最坏情况时间复杂度(worst case time complexity)</li>
</ol>
<blockquote>
<p>在最糟糕的情况下，执行这段代码的时间复杂度</p>
</blockquote>
</li>
<li>
<ol start="3">
<li>平均时间复杂度(average case time complexity)</li>
</ol>
<blockquote>
<p>最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均时间复杂度。</p>
</blockquote>
</li>
<li>
<ol start="4">
<li>均摊时间复杂度(amortized time complexity)</li>
</ol>
</li>
</ul>
<h4 id="最好-最坏情况时间复杂度">最好、最坏情况时间复杂度</h4>
<pre><code>// n 表示数组 array 的长度
int find(int[] array, int n, int x) {
  int i = 0;
  int pos = -1;
  for (; i &lt; n; ++i) {
    if (array[i] == x) {
       pos = i;
       break;
    }
  }
  return pos;
}
</code></pre>
<p>如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>
<h4 id="平均时间复杂度">平均时间复杂度</h4>
<p>以上面的代码为例，要查找x在数组中的位置，有2种情况，第一种，x在数组中，第二种，x不在数组中。</p>
<p>每种情况下，查找总次数为 1+2+3+..+n+n（第一种情况数量为1+2+3+..+n,第二种情况为n）</p>
<p>一共有n+1种情况</p>
<p>所以，平均时间复杂度为(1+2+3+..+n+n)/(n+1) = (n*(n+1)/2 + 2n/2)/(n+1) = (n*(n+3))/(2*(n+1))</p>
<p>省略掉系数、低阶、常量，所以，这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p>
<p><strong>但是</strong></p>
<p>n+1 种情况，出现的概率并不是一样的</p>
<p>要查找的变量 x，要么在数组里，要么就不在数组里。在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)</p>
<p>所以，时间复杂度为:</p>
<p><img src="https://wmszhe.github.io//post-images/36c0aabdac69032f8a43368f5e90c67f.jpg" alt=""></p>
<p>==<strong>即，时间复杂度为O(n)</strong>==</p>
<h4 id="均摊时间复杂度">均摊时间复杂度</h4>
<pre><code>// array 表示一个长度为 n 的数组
// 代码中的 array.length 就等于 n
int[] array = new int[n];
int count = 0;

void insert(int val) {
   if (count == array.length) {
      int sum = 0;
      for (int i = 0; i &lt; array.length; ++i) {
         sum = sum + array[i];
      }
      array[0] = sum;
      count = 1;
   }
   array[count] = val;
   ++count;
}
</code></pre>
<p>这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>
<p>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p>
<p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(https://wmszhe.github.io//post-images/6df62366a60336d9de3bc34f488d8bed.jpg)</p>
<p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p>
<p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()<strong>第一个</strong>区别于 find() 的地方。</p>
<p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p>
<p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p>
<p>继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路</p>
<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>
<h2 id="空间复杂度">空间复杂度</h2>
<blockquote>
<p>空间复杂度全称就是<strong>渐进空间复杂度（asymptotic space complexity,表示算法的存储空间与数据规模之间的增长关系</strong></p>
</blockquote>
<h3 id="空间复杂度分析">空间复杂度分析</h3>
<pre><code>void print(int n) {
  int i = 0;
  int[] a = new int[n];
  for (i; i &lt;n; ++i) {
    a[i] = i * i;
  }

  for (i = n-1; i &gt;= 0; --i) {
    print out a[i]
  }
}
</code></pre>
<p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)</p>
<h3 id="几种常见的空间复杂度">几种常见的空间复杂度</h3>
<ul>
<li>
<ol>
<li>O(1)</li>
</ol>
</li>
<li>
<ol start="2">
<li>O(n)</li>
</ol>
</li>
<li>
<ol start="3">
<li>O(n<sup>2</sup>)</li>
</ol>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。</p>
<p><img src="https://wmszhe.github.io//post-images/497a3f120b7debee07dc0d03984faf04.jpg" alt=""></p>
<h2 id="demo">Demo</h2>
<pre><code>// 全局变量，大小为 10 的数组 array，长度 len，下标 i。
int array[] = new int[10]; 
int len = 10;
int i = 0;

// 往数组中添加一个元素
void add(int element) {
   if (i &gt;= len) { // 数组空间不够了
     // 重新申请一个 2 倍大小的数组空间
     int new_array[] = new int[len*2];
     // 把原来 array 数组中的数据依次 copy 到 new_array
     for (int j = 0; j &lt; len; ++j) {
       new_array[j] = array[j];
     }
     // new_array 复制给 array，array 现在大小就是 2 倍 len 了
     array = new_array;
     len = 2 * len;
   }
   // 将 element 放到下标为 i 的位置，下标 i 加一
   array[i] = element;
   ++i;
}
</code></pre>
<p>当i&lt; len时, 即 i = 0,1,2,...,n-1的时候，for循环不走，所以这n次的时间复杂度都是O(1);</p>
<p>当i &gt;= len时, 即 i = n的时候，for循环进行数组的copy，所以只有这1次的时间复杂度是O(n);</p>
<p>由此可知:</p>
<p>该算法的最好情况时间复杂度(best case time complexity)为O(1);</p>
<p>最坏情况时间复杂度(worst case time complexity)为O(n);</p>
<p>平均情况时间复杂度(average case time complexity):</p>
<p>第一种计算方式: (1+1+...+1+n)/(n+1) = 2n/(n+1) 【注: 式子中1+1+...+1中有n个1】,所以平均复杂度为O(1);</p>
<p>第二种计算方式(加权平均法，又称期望): 1*(1/n+1)+1*(1/n+1)+...+1*(1/n+1)+n*(1/(n+1))=1，所以加权平均时间复杂度为O(1);</p>
<p>第三种计算方式(均摊时间复杂度): 前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，所以把最后一次的复杂度分摊到前n次上，那么均摊下来每次操作的复杂度为O(1)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构和算法]]></title>
        <id>https://wmszhe.github.io//post/shu-ju-jie-gou-he-suan-fa</id>
        <link href="https://wmszhe.github.io//post/shu-ju-jie-gou-he-suan-fa">
        </link>
        <updated>2019-07-04T03:20:13.000Z</updated>
        <summary type="html"><![CDATA[<p>数据结构和算法</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据结构和算法</p>
<!-- more -->
<p><img src="https://wmszhe.github.io//post-images/913e0ababe43a2d57267df5c5f0832a7.jpg" alt=""></p>
<h3 id="线性表和非线性表">线性表和非线性表</h3>
<ul>
<li>
<ol>
<li>线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构
<img src="https://wmszhe.github.io//post-images/b6b71ec46935130dff5c4b62cf273477.jpg" alt=""></li>
</ol>
</li>
<li>
<ol start="2">
<li>非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。
<img src="https://wmszhe.github.io//post-images/6ebf42641b5f98f912d36f6bf86f6569.jpg" alt=""></li>
</ol>
</li>
</ul>
<h3 id="常见的策略">常见的策略</h3>
<ul>
<li>先进先出策略 FIFO（First In，First Out）</li>
<li>最少使用策略 LFU（Least Frequently Used）</li>
<li>最近最少使用策略 LRU（Least Recently Used）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android性能优化]]></title>
        <id>https://wmszhe.github.io//post/android-xing-neng-you-hua</id>
        <link href="https://wmszhe.github.io//post/android-xing-neng-you-hua">
        </link>
        <updated>2019-06-24T09:17:17.000Z</updated>
        <summary type="html"><![CDATA[<p>Android性能优化，一些性能优化方式。<br>
<br>
<br></p>
<h2 id="持续更新">===持续更新===</h2>
]]></summary>
        <content type="html"><![CDATA[<p>Android性能优化，一些性能优化方式。<br>
<br>
<br></p>
<h2 id="持续更新">===持续更新===</h2>
<!-- more -->
<br>
<br>
<h2 id="删除多余依赖项">删除多余依赖项</h2>
<ul>
<li>
<ol>
<li>查找多余依赖</li>
</ol>
<blockquote>
<p>菜单栏 -&gt; Analyze -&gt; Run Inspection Name -&gt; 输入unused library -&gt; 回车 -&gt; 查看分析结果</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1561599539057.png" alt=""></p>
</li>
<li>
<ol start="2">
<li>查看module依赖</li>
</ol>
<blockquote>
<p>使用gradle，依次确认各个module实际依赖情况</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1561599225931.png" alt=""></p>
<p><img src="https://wmszhe.github.io//post-images/1561368142795.png" alt=""></p>
</li>
<li>
<ol start="3">
<li>排除多余依赖</li>
</ol>
<blockquote>
<p>根据InspectionResult结果和dependencies结果，排除多余依赖项</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1561368152549.png" alt=""></p>
<p><img src="https://wmszhe.github.io//post-images/1561599326748.png" alt=""></p>
</li>
</ul>
<h2 id="删除多余的资源文件">删除多余的资源文件</h2>
<blockquote>
<p>菜单栏 -&gt; Analyze -&gt; Run Inspection Name -&gt; 输入unused Resources -&gt; 回车 -&gt; 查看分析结果 -&gt; 删除</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1561629719716.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dart一些特殊的特性]]></title>
        <id>https://wmszhe.github.io//post/dart-yi-xie-te-shu-de-te-xing</id>
        <link href="https://wmszhe.github.io//post/dart-yi-xie-te-shu-de-te-xing">
        </link>
        <updated>2019-06-21T02:21:04.000Z</updated>
        <summary type="html"><![CDATA[<p>Dart一些特殊的特性，比较容易忘记和混淆的</p>
]]></summary>
        <content type="html"><![CDATA[<p>Dart一些特殊的特性，比较容易忘记和混淆的</p>
<!-- more -->
<h5 id="">??=</h5>
<blockquote>
<p>仅在变量为null时赋值，使用??=运算符</p>
</blockquote>
<pre><code>// 如果b为空，则将值分配给b；否则，b保持不变
b ??= value;
</code></pre>
<h5 id="-2">?.</h5>
<blockquote>
<p>eg : foo?.bar</p>
</blockquote>
<blockquote>
<p>foo可以为空,foo为空时返回空，否则返回bar</p>
</blockquote>
<pre><code>foo?.bar

====等同于====

if(foo != null) {
    return bar;
} else {
    return null;
}
</code></pre>
<h5 id="和-~">/ 和 ~/</h5>
<blockquote>
<p>/ 除</p>
</blockquote>
<blockquote>
<p>~/ 返回一个整数值的除法</p>
</blockquote>
<pre><code>assert(5 / 2 == 2.5); // 结果是double类型
assert(5 ~/ 2 == 2); // 结果是一个整数
</code></pre>
<h5 id="print">print</h5>
<blockquote>
<p>打印重复内容，可以使用*</p>
</blockquote>
<blockquote>
<p>如果要打印d.e，外层添加{}</p>
</blockquote>
<pre><code>print(&quot;abc&quot;);
print(&quot;abc $d&quot;);
print(&quot;abc ${d.e}&quot;);
print(&quot;abc&quot; * 10); // 打印10次abc
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlutterUI相关]]></title>
        <id>https://wmszhe.github.io//post/flutterui-xiang-guan</id>
        <link href="https://wmszhe.github.io//post/flutterui-xiang-guan">
        </link>
        <updated>2019-06-19T08:48:52.000Z</updated>
        <summary type="html"><![CDATA[<p>获取屏幕尺寸，widget尺寸和位置</p>
]]></summary>
        <content type="html"><![CDATA[<p>获取屏幕尺寸，widget尺寸和位置</p>
<!-- more --> 
<h3 id="屏幕尺寸通过window相关方法获取">屏幕尺寸通过window相关方法获取</h3>
<h5 id="屏幕尺寸物理像素-px">屏幕尺寸（物理像素 px）</h5>
<pre><code>window.physicalSize -&gt; Size(960.0, 720.0)
</code></pre>
<h5 id="屏幕密度">屏幕密度</h5>
<pre><code>window.devicePixelRatio -&gt; 2.0
</code></pre>
<h3 id="屏幕尺寸通过mediaquery相关方法获取">屏幕尺寸通过MediaQuery相关方法获取</h3>
<blockquote>
<p>MediaQuery最终还是调用的window方法</p>
</blockquote>
<h5 id="屏幕尺寸逻辑像素-dp">屏幕尺寸（逻辑像素 dp）</h5>
<blockquote>
<p>MediaQuery.of(context).size获取的是逻辑像素，物理像素/屏幕密度</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1560934244332.png" alt=""></p>
<pre><code>MediaQuery.of(context).size -&gt; Size(480.0, 360.0)
</code></pre>
<h5 id="屏幕密度-2">屏幕密度</h5>
<pre><code>MediaQuery.of(context).devicePixelRatio -&gt; 2.0
</code></pre>
<h5 id="横竖屏">横竖屏</h5>
<blockquote>
<p>横竖屏是根据宽高判断的</p>
</blockquote>
<p><img src="https://wmszhe.github.io//post-images/1560934253781.png" alt=""></p>
<p><img src="https://wmszhe.github.io//post-images/1560934262800.png" alt=""></p>
<pre><code>MediaQuery.of(context).orientation -&gt; Orientation.landscape
</code></pre>
<h3 id="widget大小和位置">Widget大小和位置</h3>
<h4 id="可以通过globalkey获取">可以通过GlobalKey获取</h4>
<blockquote>
<p>参考：<a href="https://medium.com/@diegoveloper/flutter-widget-size-and-position-b0a9ffed9407">Flutter : Widget Size and Position</a></p>
</blockquote>
<blockquote>
<p>需要对每个widget创建一个GlobalKey</p>
</blockquote>
<pre><code>GlobalKey _keyRed = GlobalKey();
</code></pre>
<pre><code>key: _keyRed,
</code></pre>
<pre><code>RenderBox findRenderObject = _keyRed.currentContext.findRenderObject();
var offset = findRenderObject.localToGlobal(Offset.zero);
print(&quot;---icon offset : $offset&quot;);

var size = _keyRed.currentContext.size;
print(&quot;---icon size : $size&quot;);
</code></pre>
<h4 id="从context对象中获取">从context对象中获取</h4>
<h5 id="自定义widget时可以从build方法中的context中获取">自定义Widget时，可以从build方法中的context中获取</h5>
<pre><code>class CustomIcon extends Icon {
  CustomIcon(IconData icon) : super(icon);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      child: Icon(icon),
      onTap: () {
        RenderBox findRenderObject = context.findRenderObject();
        var offset = findRenderObject.localToGlobal(Offset.zero);
        print(&quot;icon offset : $offset&quot;);

        var size = context.size;
        print(&quot;icon size : $size&quot;);
      },
    );
  }
}
</code></pre>
<h5 id="直接使用系统widget时使用layoutbuilderlayoutbuilder提供了build方法中含有context对象">直接使用系统widget时，使用LayoutBuilder，LayoutBuilder提供了build方法中含有context对象</h5>
<pre><code>class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Row(
        children: &lt;Widget&gt;[
          LayoutBuilder(
            builder: (context, constraints) {
              return GestureDetector(
                child: MyIcon(Icons.dashboard),
                onTap: (){
                  RenderBox findRenderObject = context.findRenderObject();
                  var offset = findRenderObject.localToGlobal(Offset.zero);
                  print(&quot;---icon offset : $offset&quot;);

                  var size = context.size;
                  print(&quot;---icon size : $size&quot;);
                },
              );
            },
          ),
          MyIcon(Icons.ac_unit),
        ],
      ),
    );
  }
}
</code></pre>
<h4 id="在widget-build完成之后执行操作">在widget build完成之后，执行操作</h4>
<blockquote>
<p>在return一个widget之前，context为null，如果想要在build之后，立即获取一些属性，可以使用WidgetsBinding.instance.addPostFrameCallback((_) =&gt; afterBuild(context));</p>
</blockquote>
<pre><code>class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Row(
        children: &lt;Widget&gt;[
          LayoutBuilder(
            builder: (context, constraints) {
              WidgetsBinding.instance.addPostFrameCallback((_) =&gt; afterBuild(context));
              return Container(
                child: MyIcon(Icons.dashboard),
              );
            },
          ),
        ],
      ),
    );
  }

  afterBuild(BuildContext context) {
    RenderBox findRenderObject = context.findRenderObject();
    var offset = findRenderObject.localToGlobal(Offset.zero);
    print(&quot;---icon offset : $offset&quot;);

    var size = context.size;
    print(&quot;---icon size : $size&quot;);
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FLutter编译桌面端app]]></title>
        <id>https://wmszhe.github.io//post/flutter-bian-yi-zhuo-mian-duan-app</id>
        <link href="https://wmszhe.github.io//post/flutter-bian-yi-zhuo-mian-duan-app">
        </link>
        <updated>2019-06-18T09:35:45.000Z</updated>
        <summary type="html"><![CDATA[<p>使用<a href="https://github.com/google/flutter-desktop-embedding">flutter-desktop-embedding</a>编译适用于macos、windows、linux桌面端的app</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用<a href="https://github.com/google/flutter-desktop-embedding">flutter-desktop-embedding</a>编译适用于macos、windows、linux桌面端的app</p>
<!-- more --> 
<ul>
<li>
<ol>
<li>配置flutter环境，必须在master分支</li>
</ol>
<pre><code>flutter channel master
flutter upgrade
</code></pre>
</li>
<li>
<ol start="2">
<li>clone flutter-desktop-embedding</li>
</ol>
<pre><code>git clone git@github.com:google/flutter-desktop-embedding.git
</code></pre>
</li>
<li>
<ol start="3">
<li>复制flutter-desktop-embedding/example到自己的开发目录下,重命名为flutter_desktop</li>
</ol>
<blockquote>
<p>目前不支持flutter create直接创建desktop项目，只能复制出example项目修改</p>
</blockquote>
</li>
<li>
<ol start="4">
<li>开启ENABLE_FLUTTER_DESKTOP</li>
</ol>
<ul>
<li><strong>一次性，每次打开项目都要执行</strong><pre><code>命令行中 export ENABLE_FLUTTER_DESKTOP=true
</code></pre>
</li>
<li><strong>永久</strong><pre><code>.zshrc中添加 export ENABLE_FLUTTER_DESKTOP=true
</code></pre>
</li>
<li><strong>如果使用的是vscode</strong><pre><code>打开设置(json)，添加
&quot;dart.env&quot;: {
    &quot;ENABLE_FLUTTER_DESKTOP&quot;: true,
}
</code></pre>
</li>
</ul>
</li>
<li>
<ol start="5">
<li>更新依赖</li>
</ol>
<pre><code>flutter packages get
</code></pre>
</li>
<li>
<ol start="6">
<li>flutter run,即可看到demo项目
<img src="https://wmszhe.github.io//post-images/1560851493604.png" alt=""></li>
</ol>
</li>
<li>
<ol start="7">
<li>使用文本编辑器打开flutter_desktop项目，在lib目录下编写自己的代码
<img src="https://wmszhe.github.io//post-images/1560850644118.png" alt=""></li>
</ol>
</li>
<li>
<ol start="8">
<li>over!</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>https://wmszhe.github.io//post/git</id>
        <link href="https://wmszhe.github.io//post/git">
        </link>
        <updated>2019-06-15T12:19:24.000Z</updated>
        <summary type="html"><![CDATA[<p>Git相关,常用Git命令...</p>
]]></summary>
        <content type="html"><![CDATA[<p>Git相关,常用Git命令...</p>
<!-- more --> 
<h3 id="ssh">SSH</h3>
<pre><code>1. 生成SSH秘钥，秘钥名字最好便于识别，例如用自己的名字,[keyname]=name
    ssh-keygen -f ~/.ssh/[keyname]
2. 查看公钥信息
    cat ~/.ssh/[keyname].pub
3. 将公钥信息粘贴到gerrit上，打开gerrit点击右上角的登录，使用员工账号与密码登录，登录后点击gerrit右上角用户名，点击弹出框左下的Settings,选择左侧的SSH Public Keys，将公钥信息粘贴进去点击Add。
4. 将私钥加到ssh-agent
    ssh-agent bash
    ssh-add ~/.ssh/[keyname]
5. 配置git
    git config --global user.name [fullname] 这个名字建议写全名
    git config --global user.email [email]  这个email填写你的邮箱
    git config --global color.ui true
    git config --global gui.encoding utf-8

</code></pre>
<h3 id="设置git全局设置">设置git全局设置：</h3>
<pre><code>git config --global user.name &quot;your_name&quot; 
git config --global user.email  &quot;your_email&quot;
</code></pre>
<h3 id="需要取消git的全局设置">需要取消git的全局设置:</h3>
<pre><code>git config --global --unset user.name
git config --global --unset user.email
</code></pre>
<h3 id="针对每个项目单独设置用户名和邮箱设置方法如下">针对每个项目，单独设置用户名和邮箱，设置方法如下：</h3>
<pre><code>git config user.name &quot;your_name&quot; 
git config user.email &quot;your_email&quot;
</code></pre>
<h3 id="测试连接">测试连接</h3>
<pre><code>ssh -T git@github.com
ssh -T git@192.168.1.2
</code></pre>
<h3 id="gitignore无效的解决方法">.gitignore无效的解决方法</h3>
<p>在项目文件夹下打开git bash，执行</p>
<pre><code>// git rm -r --cached .DS_Store 这句代码的意思就是解除跟踪DS_Store，清缓存
git rm -r --cached .
git add .
git commit -m 'update .gitignore'
</code></pre>
<h3 id="init">init</h3>
<pre><code>git init
git add .
git commit -m &quot;init&quot;
</code></pre>
<h3 id="init后传至git仓库">init后传至git仓库</h3>
<pre><code>git remote add origin git@github.com:wmszhe/PythonTools.git
git push -u origin master
</code></pre>
<h3 id="日志">日志</h3>
<h5 id="1查询日志">1.查询日志</h5>
<pre><code>git log
</code></pre>
<h5 id="2查指定文件的提交日志">2.查指定文件的提交日志</h5>
<pre><code>1. 查看日志记录
git log --pretty=oneline .gitignore

2. 使用git show查看具体日志 --&gt; git show &lt;git提交版本号&gt; &lt;文件名&gt;
git show 03bb009eb06b16c62155206b0e5724b532820efd .gitignore
</code></pre>
<h5 id="3查询某个人的提交日志">3.查询某个人的提交日志</h5>
<pre><code>git log --author=&quot;author&quot;
</code></pre>
<h3 id="clone">clone</h3>
<pre><code>git clone https://github.com/CharonChui/AndroidNote.git __AndroidNote(自定义的文件夹名)
git clone ssh://zhe.wang@192.168.0.119:29418/adclient -b gte
</code></pre>
<h3 id="安装hook目的是在提交信息中自动创建-change-id-标签">安装hook,目的是在提交信息中自动创建 'Change-Id:' 标签</h3>
<pre><code>cd adclient
scp -p -P 29418 zhe.wang@192.168.0.119:hooks/commit-msg .git/hooks/
</code></pre>
<h3 id="查看分支">查看分支</h3>
<pre><code>git branch 
git branch -a
</code></pre>
<h3 id="切换分支">切换分支</h3>
<pre><code>//本地无分支，加 -b ,相当于 git branch sdpost_dev ，git checkout sdpost_dev
git checkout -b sdpost_dev
//本地已有分支，直接切换
git checkout sdpost_dev
//checkout远端分支
git checkout -b develop origin/develop
</code></pre>
<h3 id="从某个版本代码拉取新的分支">从某个版本代码拉取新的分支</h3>
<pre><code>git checkout -b newbranchname xxxxx(commit id)
</code></pre>
<h3 id="修改分支名称">修改分支名称</h3>
<p>本地分支</p>
<pre><code>git branch -m oldbranchname newbranchname
</code></pre>
<p>远程分支</p>
<pre><code>将本地分支重命名为新分支名称，然后删除远程分支，再把本地分支上传
</code></pre>
<h3 id="把新建的本地分支push到远程服务器远程分支与本地分支同名当然可以随意起名">把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）</h3>
<pre><code>git push origin wz-jr:wz-jr
</code></pre>
<pre><code>// 创建远端分支的另一种方式
git checkout -b my-test  //在当前分支下创建my-test的本地分支分支
git push origin my-test  //将my-test分支推送到远程
git branch --set-upstream-to=origin/my-test //将本地分支my-test关联到远程分支my-test上   
git branch -a //查看远程分支 
</code></pre>
<h3 id="删除分支">删除分支</h3>
<pre><code>git branch -d gte
git branch -D gte(强制删除)
</code></pre>
<h3 id="恢复删除的分支">恢复删除的分支</h3>
<pre><code>git reflog(找到想要恢复的分支的散列值)
git branch local-test HEAD@{2}
</code></pre>
<h3 id="查看tag">查看tag</h3>
<pre><code>git tag
</code></pre>
<h3 id="查看tag详细信息">查看tag详细信息</h3>
<pre><code>git show v1.0
</code></pre>
<h3 id="添加tag">添加tag</h3>
<pre><code>git tag v1.0
</code></pre>
<h3 id="添加带备注的tag">添加带备注的tag</h3>
<pre><code>git tag -a v1.0 -m &quot;v1.0&quot;
</code></pre>
<h3 id="给指定的某个commit号加tag">给指定的某个commit号加tag</h3>
<pre><code>git tag -a v1.0 9fceb02 -m &quot;v1.0&quot;
</code></pre>
<h3 id="将tag同步到远程服务器">将tag同步到远程服务器</h3>
<pre><code>git push origin v1.0
git push origin --tags //推送所有tag
</code></pre>
<h3 id="切换tag">切换tag</h3>
<pre><code>git checkout v1.0
</code></pre>
<h3 id="获取远程版本">获取远程版本</h3>
<pre><code>git fetch origin tag V1.0
</code></pre>
<h3 id="删除本地tag">删除本地tag</h3>
<pre><code>git tag -d v1.0
</code></pre>
<h3 id="删除远端tag">删除远端tag</h3>
<blockquote>
<p>推送的空的同名版本到线下,达到删除线上版本的目标</p>
</blockquote>
<pre><code>git tag push origin :refs/tags/v1.0
</code></pre>
<h3 id="查看状态">查看状态</h3>
<pre><code>git status
</code></pre>
<h3 id="commit">commit</h3>
<pre><code>//直接填写提交日志
git commit -m 'commit log'
</code></pre>
<h3 id="修改commit">修改commit</h3>
<pre><code>git commit --amend
</code></pre>
<h3 id="pull">pull</h3>
<pre><code>git pull origin master
</code></pre>
<h5 id="pull-错误-you-asked-to-pull-from-the-remote-origin-but-did-not-specify-a-branch-because-this-is-not-the-default-configured-remote-for-your-current-branch-you-must-specify-a-branch-on-the-command-line">pull 错误 “You asked to pull from the remote 'origin', but did not specify a branch. Because this is not the default configured remote for your current branch, you must specify a branch on the command line.”</h5>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/forever_wind/article/details/37506389">Git远程分支和refs文件详解</a></p>
</blockquote>
<blockquote>
<p>问题在于没有给当前分支配置merge的路径，git不知道去merge哪个分支。</p>
</blockquote>
<p>我们修改配置文件(.git/config)加入</p>
<pre><code>[branch &quot;wz-jr2&quot;]
	remote = origin
	merge = refs/heads/wz-jr2
</code></pre>
<p>这意味着每次fetch origin的时候更新所有remotes/origin的头指针到refs/heads/下面</p>
<h3 id="push">push</h3>
<pre><code>git push origin master
git push origin HEAD:refs/for/gte
//可提交到指定位置
git push //192.168.0.119/LocalShare/pengbo/adclient develop-post:develop-post
</code></pre>
<h3 id="回退git">回退git</h3>
<pre><code>// !!! Windows下CMD中^是特殊字符，要使用时必须用双引号包括 (git reset &lt;--soft||--mixed||--hard&gt; HEAD&quot;^&quot;)
// !!! 或者 git reset &lt;--soft||--mixed||--hard&gt; HEAD~1
git reset &lt;--soft||--mixed||--hard&gt; HEAD^ (回退到上一个版本) (HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100)
git reset &lt;--soft||--mixed||--hard&gt; xxxxxxxx (回退到指定版本)
</code></pre>
<h3 id="远程版本回退">远程版本回退</h3>
<pre><code>git push origin HEAD --force #远程提交回退
</code></pre>
<h3 id="git回退到某一历史版本后再恢复到之前版本">git回退到某一历史版本后再恢复到之前版本</h3>
<pre><code>git reset --hard xxx
git reflog (git log -g)
git reset --hard xxx
</code></pre>
<h3 id="your-branch-is-behind-originwz-jr-by-1-commit-and-can-be-fast-forwarded">Your branch is behind 'origin/wz-jr' by 1 commit, and can be fast-forwarded.</h3>
<pre><code>is behind表示落后远程版本了，并且可以fast forwarded快速合并
使用git push origin wz-jr --force强制将代码推到服务器，--force使服务器不会拒绝这个更低版本的commit
</code></pre>
<h3 id="撤销修改">撤销修改</h3>
<pre><code>git checkout -- file (命令git checkout -- file意思就是，把文件在工作区的修改全部撤销，这里有两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。)
git reset HEAD file (把暂存区的修改撤销掉（unstage），重新放回工作区)
</code></pre>
<h3 id="回退指定文件到指定版本">回退指定文件到指定版本</h3>
<pre><code>git log /e/dev/adclient/app/src/main/AndroidManifest.xml
git reset a28887c24ed89938de7f769eb18b2555de790668 /e/dev/adclient/app/src/main/AndroidManifest.xml
git checkout -- /e/dev/adclient/app/src/main/AndroidManifest.xml
</code></pre>
<h3 id="重新提交-amend">重新提交 amend</h3>
<pre><code>git add .
git commit --amend( --no-edit)
// git push origin gte
// git push origin HEAD:refs/for/gte
// 如果已经push到git仓库,amend后直接push会生成新的记录，需要--force-with-lease
git push --force-with-lease origin master(安全的强制推送)
</code></pre>
<h3 id="暂存恢复-stash">暂存/恢复 stash</h3>
<pre><code>git stash(暂存)
git stash save &quot;&quot; (暂存)
git stash pop(apply last stash and remove it from the list)
git stash list()
git stash pop stash@{1}(取出指定的暂存,取出后会将对应的stash id 从stash list里删除)
git stash apply stash@{1}(取出指定的暂存，取出后会继续保存stash id)
git stash drop stash@{1}(删除指定的暂存)
git stash clear(将栈清空)
</code></pre>
<h3 id="cherry-pick">cherry-pick</h3>
<pre><code>// 将另一个分支上的一个提交合并到本分支
git cherry-pick xxxx(commit id)
</code></pre>
<h3 id="revert">revert</h3>
<pre><code>git revert xxx
git commit
// git push origin gte
git push origin HEAD:refs/for/sdpost_dev
</code></pre>
<h3 id="fetchrebase">fetch/rebase</h3>
<pre><code>首先用git fetch返回服务器上的代码
用git rebase合并
    &gt; 合并冲突
    &gt; git add .
    &gt; 用git rebase --continue继续没完成的合并
    &gt; 重新提交git commit --amend
最后就可以用git push更新到服务器上去。
</code></pre>
<pre><code>git pull --rebase origin develop-post(git pull --rebase = git fetch + git rebase)
</code></pre>
<h3 id="取消本次rebase">取消本次rebase</h3>
<pre><code>git rebase --abort
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello EveryOne]]></title>
        <id>https://wmszhe.github.io//post/hello-everyone</id>
        <link href="https://wmszhe.github.io//post/hello-everyone">
        </link>
        <updated>2019-06-15T11:18:56.000Z</updated>
        <summary type="html"><![CDATA[<p>👏 欢迎来到 <strong>zhe's home!</strong> 👏</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏 欢迎来到 <strong>zhe's home!</strong> 👏</p>
<!-- more --> 
<blockquote>
<p>Time: 2019年6月15日，周六。</p>
</blockquote>
<ol>
<li>本网站通过Github Pages创建。创建过程参考<a href="https://sspai.com/post/54608">GitHub Pages 搭建教程</a></li>
<li>使用Gridea管理本网站 <a href="https://gridea.dev/">Gridea官网</a></li>
<li>本网站主要记录
<ul>
<li>工作笔记</li>
<li>日常</li>
<li>备忘</li>
</ul>
</li>
<li>随缘更新</li>
</ol>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>