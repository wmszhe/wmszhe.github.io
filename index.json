[{"content":"IDEA相关 ，持续更新\n一. 分类显示类方法 参考 为什么 idea 不做一个分类显示类方法的功能？\n// region foo // endregion foo eg:\n二. 快捷键 1. 隐藏所有工具 Cmd + Shift + F12 2. 隐藏活动的工具 Shift + Esc ","permalink":"https://blog.wmszhe.com/post/2020-02-27-idea-tips/","summary":"\u003cp\u003eIDEA相关 ，持续更新\u003c/p\u003e","title":"IDEA相关"},{"content":"Java Class.forName\nAndroid添加一个view到多个view中 假如有一个view: View view = new View();\n有多个FrameLayout: FrameA，FrameB\n如果要将view添加到FrameA，FrameB，调用FrameA.addView(view)，再FrameB.addView(view)时，会提示view已经有一个父View了，不能添加成功。\n此时，我们可以通过Class.forName，来实现这个功能\ntry { // 根据view加载view的class Class\u0026lt;?\u0026gt; clazz = Class.forName(view.getClass().getName()); // 调用带Context的构造函数 Constructor\u0026lt;?\u0026gt; constructor = clazz.getConstructor(Context.class); // 生成一个新的view对象 View view = (View) constructor.newInstance(mContext); // 添加 frame.addView(view); } catch (Exception e) { e.printStackTrace(); } Class.forName说明 一. 什么时候用Class.forName() 给你一个字符串变量，它代表一个类的包名和类名，你怎么实例化它？你第一想到的肯定是new，但是注意一点： A a = (A)Class.forName(“pacage.A”).newInstance(); A a = new A();\n是一样的效果。\n二. 用法 如果被调用的类的构造函数为默认的构造函数，采用Class.newInstance()\n如果需要调用类的带参构造函数、私有构造函数， 就需要采用Constractor.newInstance()\n加载无参数的类\ntry { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;A\u0026#34;); A a = (A) clazz.newInstance(); } catch (Exception e) { e.printStackTrace(); } 加载有参数的类\n// 带context参数 try { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;A\u0026#34;); Constructor\u0026lt;?\u0026gt; constructor = clazz.getConstructor(Context.class); A a = (A) constructor.newInstance(mContext); } catch (Exception e) { e.printStackTrace(); } // 其他参数 try { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;A\u0026#34;); Constructor\u0026lt;?\u0026gt; constructor = clazz.getConstructor(new Class[]{int.class, String.class}); A a = (A) constructor.newInstance(new Object[]{5, \u0026#34;abc\u0026#34;}); } catch (Exception e) { e.printStackTrace(); } 参考 https://blog.csdn.net/kaiwii/article/details/7405761 https://www.cnblogs.com/xiaoenduke/p/10854657.html ","permalink":"https://blog.wmszhe.com/post/2020-09-02-android-add-view-multiple-times/","summary":"\u003cp\u003eJava Class.forName\u003c/p\u003e","title":"Android添加一个view到多个view中"},{"content":" Android Studio 3.0以后，通过IDE直接run出来的安装包，有些手机无法直接安装，会提示Failed to install app-debug.apk: Failure [INSTALL_FAILED_TEST_ONLY: installPackage]\n问题 Android Studio 3.0以后，通过IDE直接run出来的安装包，无法直接安装，也无法通过adb install xx.apk的方式来安装。会提示Failed to install app-debug.apk: Failure [INSTALL_FAILED_TEST_ONLY: installPackage]\n大多数手机上，我们可以通过adb install -t xx.apk的方式来安装，但是某些OPPO手机上，还是无法安装。\n原因 IDE 直接 Run 出来的 APK ，会在 AndroidManifest.xml 文件中，增加 android:testOnly=\u0026quot;true\u0026quot; 属性，正是因为这个属性，阻止了我们使用正常方式安装 APK。\n解决方法 1. 方法一（修改打包方式） 当我们需要debug包的时候，不使用IDE直接run跑出的apk，而是通过IDE中gradle中，app-build-build命令来生成 通过IDE菜单工具栏-Build-Build Bundle(s)/APK(s)来生成apk 2. 方法二（会造成其他问题，不推荐） 在项目gradle.properties(或者gradle全局配置目录 ~/.gradle/)文件中添加android.injected.testOnly=false\n此方法，会造成IDE run apk的时候，app无法直接打开启动页面，直接返回到桌面\n不同方式打包，反编译结果 IDE直接run出来的apk\n带有android:testOnly=\u0026quot;true\u0026quot;\ngradle-app-build-build编译出的apk\n不带android:testOnly=\u0026quot;true\u0026quot;\nIDE菜单工具栏-Build-Build Bundle(s)/APK(s)编译出的apk\n不带android:testOnly=\u0026quot;true\u0026quot;\n","permalink":"https://blog.wmszhe.com/post/2020-06-30-as-testonly/","summary":"\u003cblockquote\u003e\n\u003cp\u003eAndroid Studio 3.0以后，通过IDE直接run出来的安装包，有些手机无法直接安装，会提示\u003ccode\u003eFailed to install app-debug.apk: Failure [INSTALL_FAILED_TEST_ONLY: installPackage]\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","title":"AS3.0以后，debug包INSTALL_FAILED_TEST_ONLY问题"},{"content":"keytool -importkeystore -srckeystore /Users/zhe/Desktop/Test.jks -destkeystore /Users/zhe/Desktop/Test_sign.jks -deststoretype PKCS12\n生成jks 通过AndroidStudio生成 通过命令生成 生成jks文件后，会有个Warning jks密钥库使用专用格式建议使用keytool my release key keystore my release key keystore pkcs12迁移到行业标准格式pkcs12\n解决方案： keytool -importkeystore -srckeystore srckey -destkeystore targetkey -deststoretype pkcs12 注意srckey和targetkey不能相同,否则会报如下错误\nkeytool 错误: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big. eg: keytool -importkeystore -srckeystore /Users/zhe/Desktop/Test.jks -destkeystore /Users/zhe/Desktop/Test_sign.jks -deststoretype PKCS12 ","permalink":"https://blog.wmszhe.com/post/2019-11-01-android-jks/","summary":"\u003cp\u003ekeytool -importkeystore -srckeystore /Users/zhe/Desktop/Test.jks -destkeystore /Users/zhe/Desktop/Test_sign.jks -deststoretype PKCS12\u003c/p\u003e","title":"Android生成jks时遇到的"},{"content":"Flutter开发过程中遇到的一些问题。\n1. Android设置Splash时图片拉伸解决方法 设置splash：\nres/drawable/launch_backgroud.xml中，item-bitmap设置splash图片\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;layer-list xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;item android:drawable=\u0026#34;@android:color/white\u0026#34; /\u0026gt; \u0026lt;item\u0026gt; \u0026lt;bitmap android:gravity=\u0026#34;center|bottom\u0026#34; android:src=\u0026#34;@mipmap/tk_splash\u0026#34; /\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/layer-list\u0026gt; 图片拉伸解决方法\n图片要放在mipmap中，不能放在drawable中\nmipmap分多个分辨率的文件夹。如果只使用一张图片的话，放在mipmap-mdpi下，图片会偏大，放在mipmap-xxxhdpi文件夹下，图片会偏小。经测试，放在mipmap-xhdpi文件夹下合适。\n原因参考 Android drawable微技巧，你所不知道的drawable的那些细节\n2. 多语言支持iOS无效，只显示英文 参考Appendix: Updating the iOS app bundle\n","permalink":"https://blog.wmszhe.com/post/2019-08-22-flutter-qa/","summary":"\u003cp\u003eFlutter开发过程中遇到的一些问题。\u003c/p\u003e","title":"Flutter遇到的问题"},{"content":"最近在知乎看到了一个关于洗牌算法，学习一下，记录下。\n源地址：知乎：有哪些算法惊艳到了你?\n问题：设计一个公平的洗牌算法 给定一个长度n个数组，最终排列的可能性一共有 n!个，公平的洗牌算法，应该能等概率地给出这 n! 个结果中的任意一个。\n我们再换一个角度思考“公平”这个话题。其实也就是，对于生成的排列，每一个元素都能独立等概率地出现在每一个位置。或者反过来，每一个位置都能独立等概率地放置每个元素。\nJava实现 private static Random rand = new Random(); private static List\u0026lt;Integer\u0026gt; mList = Arrays.asList(1, 2, 3, 4, 5); public static void main(String[] args) { List\u0026lt;Integer\u0026gt; shuffle = shuffle(mList); System.out.print(shuffle.toString()); } private static List\u0026lt;Integer\u0026gt; shuffle(List\u0026lt;Integer\u0026gt; list) { for (int i = list.size() - 1; i \u0026gt;= 0; i--) { // 取0-i之间的随机数 int j = rand.nextInt(i + 1); // 交换最后一位和随机得到的数 swap(list, i, j); } return list; } private static void swap(List\u0026lt;Integer\u0026gt; list, int i, int j) { Integer temp = list.get(i); list.set(i, list.get(j)); list.set(j, temp); } Java自带API 在Java提供的Collections包中，提供了shuffle方法\nCollections.shuffle(mList); 看下源码:\n可以看出，和上面的思路一样\n思路解析，参考上面的链接，知乎的原答案 比如数组1，2，3，4，5\n我们从后往前\n先取任意1个元素和最后一个交换位置，那么任意一个元素出现在数组最后面的概率为1/5\n我们继续，取任意一个元素和倒数第二个交换位置，概率为4/5*1/4=1/5\n依次类推，每一个元素出现在每一个位置的概率，都是 1/5\n遍历时，为什么采用从后到前的方式，而不采用从前到后？ 因为生成 [0, i] 范围的随机数比生成 [i, n) 范围的随机数简单\n生成[0, i]范围的随机数 Random rand = new Random(); int randNum = ran.nextInt(i + 1); 生成[i, n)范围的随机数 Random rand = new Random(); int randNum = rand.nextInt(n - i) + i; 参考： 随机打乱数组List洗牌算法shuffle\njava 产生指定范围的随机数\n","permalink":"https://blog.wmszhe.com/post/2019-07-16-shuffle-algorithm/","summary":"\u003cp\u003e最近在知乎看到了一个关于洗牌算法，学习一下，记录下。\u003c/p\u003e\n\u003cp\u003e源地址：\u003ca href=\"https://www.zhihu.com/question/26934313/answer/743798587\"\u003e知乎：有哪些算法惊艳到了你?\u003c/a\u003e\u003c/p\u003e","title":"洗牌算法"},{"content":"数据结构和算法 线性表和非线性表 线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构 非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。 常见的策略 先进先出策略 FIFO（First In，First Out） 最少使用策略 LFU（Least Frequently Used） 最近最少使用策略 LRU（Least Recently Used） ","permalink":"https://blog.wmszhe.com/post/2019-07-04-data-structures-and-algorithm/","summary":"数据结构和算法 线性表和非线性表 线性表（Linear List）。顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和","title":"数据结构和算法"},{"content":"数组 Array 数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。\n线性表 连续的内存空间和相同的数据结构 如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。\n根据下标随机访问数组元素的方式 一个长度为 10 的 int 类型的数组 int[] a = new int[10] , 计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。\n通过下面的寻址公式，计算出该元素存储的内存地址：\n一维数组内存寻址：\na[i]_address = base_address + i * data_type_size 二维数组内存寻址：\n对于 m * n 的数组，a [i][ j ] (i \u0026lt; m,j \u0026lt; n)的地址为：\naddress = base_address + ( i * n + j) * type_size 数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。\n插入删除低效原因 假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。\n如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。\n如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。\neg:\n假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。\n我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。\n删除时，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。我们可以多次删除操作集中在一起执行\neg:\n数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素\n为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。\n容器 ArrayList 针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList\n优势： 可以将很多数组操作的细节封装起来，比如前面提到的数组插入、删除数据时需要搬移其他数据等 支持动态扩容 不过，需要注意，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小 不足： Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。 如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组 要表示多维数组时，用数组往往会更加直观 ","permalink":"https://blog.wmszhe.com/post/2019-07-04-array/","summary":"数组 Array 数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。 线性表 连续的内存空间和相同的数据结构 如果","title":"数组Array"},{"content":"查找算法 二分查找 二分查找必须是有序对\n有序的序列，每次都是以序列的中间位置的数来与待查找的关键字进行比较，每次缩小一半的查找范围，直到匹配成功。\n优点是比较次数少，查找速度快，平均性能好；\n其缺点是要求待查表为有序表，且插入删除困难。\n因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\nwhile循环实现 最好时间复杂度：O(1)\n最差时间复杂度：O(logn)\n空间复杂度：O(1)\n/** * 二分查找 while实现 * @param aar 数组 * @param key 需要查找的元素 * @return 所查询元素的下标 */ fun binarySearch(aar: IntArray, key: Int): Int { var low: Int = 0 var high: Int = aar.size - 1 if (aar[low] \u0026gt; key || aar[high] \u0026lt; key || low \u0026gt; high) { return -1 } var mid: Int = 0 while (low \u0026lt;= high) { mid = (low + high) / 2 when { aar[mid] \u0026lt; key -\u0026gt; low = mid + 1 aar[mid] \u0026gt; key -\u0026gt; high = mid - 1 else -\u0026gt; return mid } } return -1 } 递归实现 最好时间复杂度：O(1)\n最差时间复杂度：O(logn)\n空间复杂度：O(logn)\n/** * 二分查找 递归实现 * @param aar 数组 * @param key 需要查找的元素 * @param low 较小的下标 * @param high 较大的下标 * @return 所查询元素的下标 */ fun binarySearchForRecursion(aar: IntArray, key: Int, low: Int, high: Int): Int { if (aar[low] \u0026gt; key || aar[high] \u0026lt; key || low \u0026gt; high) { return -1 } val mid: Int = (low + high) / 2 return when { aar[mid] \u0026lt; key -\u0026gt; binarySearchForRecursion(aar, key, mid + 1, high) aar[mid] \u0026gt; key -\u0026gt; binarySearchForRecursion(aar, key, low, mid - 1) else -\u0026gt; mid } } ","permalink":"https://blog.wmszhe.com/post/2019-07-04-search-algorithm/","summary":"查找算法 二分查找 二分查找必须是有序对 有序的序列，每次都是以序列的中间位置的数来与待查找的关键字进行比较，每次缩小一半的查找范围，直到匹配成功","title":"查找算法"},{"content":"算法的复杂度 解决的是“快”和“省”的问题\n参考： 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？\n参考：复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度\n时间复杂度 时间复杂度的全称是渐进时间复杂度,表示算法的执行时间与数据规模之间的增长关系。\n大 O 复杂度表示法 算法的执行效率，粗略地讲，就是算法代码执行的时间\n算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。\n比如如下代码，粗略估计执行时间\nint cal(int n) { int sum = 0; int i = 1; for (; i \u0026lt;= n; ++i) { sum = sum + i; } return sum; } 从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢\n第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)*unit_time。可以看出来，\n所有代码的执行时间 T(n) 与每行代码的执行次数成正比。\n再看下这段代码\nint cal(int n) { int sum = 0; // 1 int i = 1; // 1 int j = 1; // 1 for (; i \u0026lt;= n; ++i) { // n j = 1; // n for (; j \u0026lt;= n; ++j) { // n^2 sum = sum + i * j; // n^2 } } } 可以得出，复杂度为T(n) = (2n^2+2n+3)*unit_time。\n尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，\n所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比\n总结为：\nT(n)表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。\n所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n^2+2n+3)。这就是大 O 时间复杂度表示法。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度\n当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n^2)。\n如何分析时间复杂度 只关注循环执行次数最多的一段代码 大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。\n第一段代码，其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第 4、5 行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。\n即：第一段代码，时间复杂度为O(n), 第二段代码，时间复杂度为O(n^2)\n加法法则：总复杂度等于量级最大的那段代码的复杂度 int cal(int n) { int sum_1 = 0; int p = 1; for (; p \u0026lt; 100; ++p) { sum_1 = sum_1 + p; } int sum_2 = 0; int q = 1; for (; q \u0026lt; n; ++q) { sum_2 = sum_2 + q; } int sum_3 = 0; int i = 1; int j = 1; for (; i \u0026lt;= n; ++i) { j = 1; for (; j \u0026lt;= n; ++j) { sum_3 = sum_3 + i * j; } } return sum_1 + sum_2 + sum_3; } 上述代码3部分后2部分时间复杂度分别为O(n), O(n^2)，我们取其中最大的量级,即O(n^2).\n抽象成公式,为：\n如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).\n3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).\nint cal(int n) { int ret = 0; int i = 1; for (; i \u0026lt; n; ++i) { ret = ret + f(i); } } int f(int n) { int sum = 0; int i = 1; for (; i \u0026lt; n; ++i) { sum = sum + i; } return sum; } T(n) = T1(n) * T2(n) = O(n*n) = O(n^2)\n几种常见的时间复杂度 对于上述罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2^n) 和 O(n!)。\nO(1) 首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。\nint i = 8; int j = 6; int sum = i + j; 稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，\n一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)\nO(logn)、O(nlogn) 对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度\ni = 1; while (i \u0026lt;= n) { i = i * 2; } 从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的\n2^0 2^1 2^2 \u0026hellip; (2^x=n)\n所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2^x=n 求解x=log2n，所以，这段代码的时间复杂度就是 O(log2n)\ni = 1; while (i \u0026lt;= n) { i = i * 3; } 根据刚刚的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。\n实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？\n我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C * log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)\n换底公式\nlog32 * log2n = log32 * (log3n / log32) = log3n\n如果你理解O(logn)，那 O(nlogn) 就很容易理解了。根据乘法法则，如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。\nO(m+n)、O(m*n) 不一样的时间复杂度，代码的复杂度由两个数据的规模来决定。\nint cal(int m, int n) { int sum_1 = 0; int i = 1; for (; i \u0026lt; m; ++i) { sum_1 = sum_1 + i; } int sum_2 = 0; int j = 1; for (; j \u0026lt; n; ++j) { sum_2 = sum_2 + j; } return sum_1 + sum_2; } 从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)\n针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。\n稍微复杂一点的复杂度分析 为了表示代码在不同情况下的不同时间复杂度，我们需要引入新的概念\n最好情况时间复杂度(best case time complexity) 在最理想的情况下，执行这段代码的时间复杂度\n最坏情况时间复杂度(worst case time complexity) 在最糟糕的情况下，执行这段代码的时间复杂度\n平均时间复杂度(average case time complexity) 最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均时间复杂度。\n均摊时间复杂度(amortized time complexity) 最好、最坏情况时间复杂度 // n 表示数组 array 的长度 int find(int[] array, int n, int x) { int i = 0; int pos = -1; for (; i \u0026lt; n; ++i) { if (array[i] == x) { pos = i; break; } } return pos; } 如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。\n平均时间复杂度 以上面的代码为例，要查找x在数组中的位置，有2种情况，第一种，x在数组中，第二种，x不在数组中。\n每种情况下，查找总次数为 1+2+3+..+n+n（第一种情况数量为1+2+3+..+n,第二种情况为n）\n一共有n+1种情况\n所以，平均时间复杂度为(1+2+3+..+n+n)/(n+1) = (n*(n+1)/2 + 2n/2)/(n+1) = (n*(n+3))/(2*(n+1))\n省略掉系数、低阶、常量，所以，这个公式简化之后，得到的平均时间复杂度就是 O(n)。\n但是\nn+1 种情况，出现的概率并不是一样的\n要查找的变量 x，要么在数组里，要么就不在数组里。在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)\n所以，时间复杂度为:\n即，时间复杂度为O(n)\n均摊时间复杂度 // array 表示一个长度为 n 的数组 // 代码中的 array.length 就等于 n int[] array = new int[n]; int count = 0; void insert(int val) { if (count == array.length) { int sum = 0; for (int i = 0; i \u0026lt; array.length; ++i) { sum = sum + array[i]; } array[0] = sum; count = 1; } array[count] = val; ++count; } 这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。\n最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。\n假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：\n至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。\n首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。\n所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。\n那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？\n继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路\n对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。\n空间复杂度 空间复杂度全称就是渐进空间复杂度（asymptotic space complexity,表示算法的存储空间与数据规模之间的增长关系\n空间复杂度分析 void print(int n) { int i = 0; int[] a = new int[n]; for (i; i \u0026lt;n; ++i) { a[i] = i * i; } for (i = n-1; i \u0026gt;= 0; --i) { print out a[i] } } 跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)\n几种常见的空间复杂度 O(1) O(n) O(n2) 总结 复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。\nDemo // 全局变量，大小为 10 的数组 array，长度 len，下标 i。 int array[] = new int[10]; int len = 10; int i = 0; // 往数组中添加一个元素 void add(int element) { if (i \u0026gt;= len) { // 数组空间不够了 // 重新申请一个 2 倍大小的数组空间 int new_array[] = new int[len*2]; // 把原来 array 数组中的数据依次 copy 到 new_array for (int j = 0; j \u0026lt; len; ++j) { new_array[j] = array[j]; } // new_array 复制给 array，array 现在大小就是 2 倍 len 了 array = new_array; len = 2 * len; } // 将 element 放到下标为 i 的位置，下标 i 加一 array[i] = element; ++i; } 当i\u0026lt; len时, 即 i = 0,1,2,\u0026hellip;,n-1的时候，for循环不走，所以这n次的时间复杂度都是O(1);\n当i \u0026gt;= len时, 即 i = n的时候，for循环进行数组的copy，所以只有这1次的时间复杂度是O(n);\n由此可知:\n该算法的最好情况时间复杂度(best case time complexity)为O(1);\n最坏情况时间复杂度(worst case time complexity)为O(n);\n平均情况时间复杂度(average case time complexity):\n第一种计算方式: (1+1+\u0026hellip;+1+n)/(n+1) = 2n/(n+1) 【注: 式子中1+1+\u0026hellip;+1中有n个1】,所以平均复杂度为O(1);\n第二种计算方式(加权平均法，又称期望): 1*(1/n+1)+1*(1/n+1)+\u0026hellip;+1*(1/n+1)+n*(1/(n+1))=1，所以加权平均时间复杂度为O(1);\n第三种计算方式(均摊时间复杂度): 前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，所以把最后一次的复杂度分摊到前n次上，那么均摊下来每次操作的复杂度为O(1)\n","permalink":"https://blog.wmszhe.com/post/2020-09-02-algorithm-complexity/","summary":"算法的复杂度 解决的是“快”和“省”的问题 参考： 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？ 参考：复杂度分析（下）：浅析最好、最","title":"算法复杂度"},{"content":"链表 LinkedList 定义 链表不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用\n其中，我们把内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。我们把这个记录下个结点地址的指针叫作后继指针 next\n一. 常见的链表结构 1. 单链表\tSingly linked list 有两个结点是比较特殊的，它们分别是第一个结点和最后一个结点。我们习惯性地把第一个结点叫作头结点，把最后一个结点叫作尾结点。其中，头结点用来记录链表的基地址。有了它，就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点\n1.1插入、删除、查找 数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 O(n)。而在链表中插入或者删除一个数据，并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的,时间复杂度是 O(1)。但是，链表要想随机访问第 k 个元素，就没有数组那么高效了。因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。时间复杂度是 O(n)\n插入删除时间复杂度O(1)\n查找时间复杂度O(n)\n2. 循环链表\tMultiply linked list 循环链表是一种特殊的单链表。它跟单链表唯一的区别就在尾结点。单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。\n3. 双向链表\tDoubly linked list 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。\n双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。\n二. 经典的链表应用场景 LRU 缓存淘汰算法\n2.1 实现原理 维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。\n如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。 如果此数据没有在缓存链表中，又可以分为两种情况： 如果此时缓存未满，则将此结点直接插入到链表的头部 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部 三. 常见的链表算法 单链表反转 fun main() { val note1 = SinglyLinkedNote(1) val note2 = SinglyLinkedNote(2) val note3 = SinglyLinkedNote(3) val note4 = SinglyLinkedNote(4) note1.next = note2 note2.next = note3 note3.next = note4 printNode(reverseSingleLinkedList(note1)) } /** * 单链表反转 * @param node 单链表 * @return 反转后的结果 */ fun reverseSingleLinkedList(node: SinglyLinkedNote?): SinglyLinkedNote? { if (node?.next == null) { return node } val linkedNote = reverseSingleLinkedList(node.next) node.next?.next = node node.next = null return linkedNote } /** * 单链表 */ class SinglyLinkedNote(var value: Int?) { var next: SinglyLinkedNote? = null } /** * 打印链表 * @param data 链表 * @return 链表数据 eg: { 1 2 3 4 } */ fun printNode(data: SinglyLinkedNote?) { var node: SinglyLinkedNote? = data val str: StringBuilder = StringBuilder(\u0026#34;{ \u0026#34;) while (node != null) { str.append(node.value).append(\u0026#34; \u0026#34;) node = node.next } str.append(\u0026#34;}\u0026#34;) println(str.toString()) } 链表中环的检测 两个有序的链表合并 删除链表倒数第 n 个结点 求链表的中间结点 ","permalink":"https://blog.wmszhe.com/post/2019-07-04-linkedlist/","summary":"链表 LinkedList 定义 链表不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用 其中，我们把内存块称为链表的“结点”。为了将所有的结点串","title":"链表LinkedList"},{"content":"Android性能优化，一些性能优化方式。\n删除多余依赖项 查找多余依赖\n菜单栏 -\u0026gt; Analyze -\u0026gt; Run Inspection Name -\u0026gt; 输入unused library -\u0026gt; 回车 -\u0026gt; 查看分析结果\n查看module依赖\n使用gradle，依次确认各个module实际依赖情况\n排除多余依赖\n根据InspectionResult结果和dependencies结果，排除多余依赖项\n删除多余的资源文件 菜单栏 -\u0026gt; Analyze -\u0026gt; Run Inspection Name -\u0026gt; 输入unused Resources -\u0026gt; 回车 -\u0026gt; 查看分析结果 -\u0026gt; 删除\n","permalink":"https://blog.wmszhe.com/post/2019-06-24-android-optimize/","summary":"\u003cp\u003eAndroid性能优化，一些性能优化方式。\u003c/p\u003e","title":"Android性能优化"},{"content":"Dart一些特殊的特性，比较容易忘记和混淆的\n参数加 在调用函数传递参数时，指定参数名\nvoid sayHello({String name, String msg}){ } sayHello(name: \u0026#34;abc\u0026#34;, msg: \u0026#34;hello\u0026#34;); 可选参数 可选的参数，在调用时可以不传\n通过位置来确定实参和形参的对应关系的\n参考： https://blog.csdn.net/xlh1191860939/article/details/87895616\nString say(String from, String msg, [String device, String time]) { var result = \u0026#34;$from says $msg\u0026#34;; if (device != null) { result = \u0026#34;$result with a $device\u0026#34;; } if (time != null) { result = \u0026#34;$result at $time\u0026#34;; } return result; } void main(){ print(say(\u0026#34;david\u0026#34;, \u0026#34;hello\u0026#34;, \u0026#34;mobile\u0026#34;, \u0026#34;2019.2.29.20:08:08\u0026#34;)); // david says hello with a mobile at 2019.2.29.20:08:08 print(say(\u0026#34;david\u0026#34;, \u0026#34;hello\u0026#34;, \u0026#34;2019.2.29.20:08:08\u0026#34;, \u0026#34;mobile\u0026#34;)); // david says hello with a 2019.2.29.20:08:08 at mobile print(say(\u0026#34;david\u0026#34;, \u0026#34;hello\u0026#34;)); // david says hello } ??= 仅在变量为null时赋值，使用??=运算符\n// 如果b为空，则将值分配给b；否则，b保持不变 b ??= value; ?. eg : foo?.bar\nfoo可以为空,foo为空时返回空，否则返回bar\nfoo?.bar \u0026lt;mark\u0026gt;==等同于==\u0026lt;/mark\u0026gt; if(foo != null) { return bar; } else { return null; } / 和 ~/ / 除\n~/ 返回一个整数值的除法\nassert(5 / 2 == 2.5); // 结果是double类型 assert(5 ~/ 2 == 2); // 结果是一个整数 print 打印重复内容，可以使用*\n如果要打印d.e，外层添加{}\nprint(\u0026#34;abc\u0026#34;); print(\u0026#34;abc $d\u0026#34;); print(\u0026#34;abc ${d.e}\u0026#34;); print(\u0026#34;abc\u0026#34; * 10); // 打印10次abc ","permalink":"https://blog.wmszhe.com/post/2019-06-21-dart-features/","summary":"\u003cp\u003eDart一些特殊的特性，比较容易忘记和混淆的\u003c/p\u003e","title":"Dart一些特殊的特性"},{"content":"获取屏幕尺寸，widget尺寸和位置\n屏幕尺寸通过window相关方法获取 屏幕尺寸（物理像素 px） window.physicalSize -\u0026gt; Size(960.0, 720.0) 屏幕密度 window.devicePixelRatio -\u0026gt; 2.0 屏幕尺寸通过MediaQuery相关方法获取 MediaQuery最终还是调用的window方法\n屏幕尺寸（逻辑像素 dp） MediaQuery.of(context).size获取的是逻辑像素，物理像素/屏幕密度\nMediaQuery.of(context).size -\u0026gt; Size(480.0, 360.0) 屏幕密度 MediaQuery.of(context).devicePixelRatio -\u0026gt; 2.0 横竖屏 横竖屏是根据宽高判断的\nMediaQuery.of(context).orientation -\u0026gt; Orientation.landscape Widget大小和位置 可以通过GlobalKey获取 参考：Flutter : Widget Size and Position\n需要对每个widget创建一个GlobalKey\nGlobalKey _keyRed = GlobalKey(); key: _keyRed, RenderBox findRenderObject = _keyRed.currentContext.findRenderObject(); var offset = findRenderObject.localToGlobal(Offset.zero); print(\u0026#34;---icon offset : $offset\u0026#34;); var size = _keyRed.currentContext.size; print(\u0026#34;---icon size : $size\u0026#34;); 从context对象中获取 自定义Widget时，可以从build方法中的context中获取 class CustomIcon extends Icon { CustomIcon(IconData icon) : super(icon); @override Widget build(BuildContext context) { return GestureDetector( child: Icon(icon), onTap: () { RenderBox findRenderObject = context.findRenderObject(); var offset = findRenderObject.localToGlobal(Offset.zero); print(\u0026#34;icon offset : $offset\u0026#34;); var size = context.size; print(\u0026#34;icon size : $size\u0026#34;); }, ); } } 直接使用系统widget时，使用LayoutBuilder，LayoutBuilder提供了build方法中含有context对象 class HomePage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( body: Row( children: \u0026lt;Widget\u0026gt;[ LayoutBuilder( builder: (context, constraints) { return GestureDetector( child: MyIcon(Icons.dashboard), onTap: (){ RenderBox findRenderObject = context.findRenderObject(); var offset = findRenderObject.localToGlobal(Offset.zero); print(\u0026#34;---icon offset : $offset\u0026#34;); var size = context.size; print(\u0026#34;---icon size : $size\u0026#34;); }, ); }, ), MyIcon(Icons.ac_unit), ], ), ); } } 在widget build完成之后，执行操作 在return一个widget之前，context为null，如果想要在build之后，立即获取一些属性，可以使用WidgetsBinding.instance.addPostFrameCallback((_) =\u0026gt; afterBuild(context));\nclass HomePage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( body: Row( children: \u0026lt;Widget\u0026gt;[ LayoutBuilder( builder: (context, constraints) { WidgetsBinding.instance.addPostFrameCallback((_) =\u0026gt; afterBuild(context)); return Container( child: MyIcon(Icons.dashboard), ); }, ), ], ), ); } afterBuild(BuildContext context) { RenderBox findRenderObject = context.findRenderObject(); var offset = findRenderObject.localToGlobal(Offset.zero); print(\u0026#34;---icon offset : $offset\u0026#34;); var size = context.size; print(\u0026#34;---icon size : $size\u0026#34;); } } 软键盘相关 显示隐藏软键盘 通过焦点方式 // 隐藏 FocusScope.of(context).requestFocus(FocusNode()) // 显示 FocusScope.of(context).autofocus(_focusNode) 通过channel方式 // 显示 SystemChannels.textInput.invokeMethod(\u0026#39;TextInput.show\u0026#39;); // 隐藏 SystemChannels.textInput.invokeMethod(\u0026#39;TextInput.hide\u0026#39;); ","permalink":"https://blog.wmszhe.com/post/2019-06-19-flutter-ui/","summary":"\u003cp\u003e获取屏幕尺寸，widget尺寸和位置\u003c/p\u003e","title":"FlutterUI相关"},{"content":"使用flutter-desktop-embedding编译适用于macos、windows、linux桌面端的app\n流程 配置flutter环境，必须在master分支\nflutter channel master flutter upgrade clone flutter-desktop-embedding\ngit clone git@github.com:google/flutter-desktop-embedding.git 复制flutter-desktop-embedding/example到自己的开发目录下,重命名为flutter_desktop\n目前不支持flutter create直接创建desktop项目，只能复制出example项目修改\n开启ENABLE_FLUTTER_DESKTOP\n一次性，每次打开项目都要执行 命令行中 export ENABLE_FLUTTER_DESKTOP=true 永久 .zshrc中添加 export ENABLE_FLUTTER_DESKTOP=true 如果使用的是vscode 打开设置(json)，添加 \u0026#34;dart.env\u0026#34;: { \u0026#34;ENABLE_FLUTTER_DESKTOP\u0026#34;: true, } 更新依赖\nflutter packages get flutter run,即可看到demo项目\tflutter run 使用文本编辑器打开flutter_desktop项目，在lib目录下编写自己的代码 over!\n","permalink":"https://blog.wmszhe.com/post/2019-06-18-flutter-desktop/","summary":"\u003cp\u003e使用\u003ca href=\"https://github.com/google/flutter-desktop-embedding\"\u003eflutter-desktop-embedding\u003c/a\u003e编译适用于macos、windows、linux桌面端的app\u003c/p\u003e","title":"FLutter编译桌面端app"},{"content":"Git相关,常用Git命令\u0026hellip;\nSSH 1. 生成SSH秘钥，秘钥名字最好便于识别，例如用自己的名字,[keyname]=name ssh-keygen -f ~/.ssh/[keyname] 2. 查看公钥信息 cat ~/.ssh/[keyname].pub 3. 将公钥信息粘贴到gerrit上，打开gerrit点击右上角的登录，使用员工账号与密码登录，登录后点击gerrit右上角用户名，点击弹出框左下的Settings,选择左侧的SSH Public Keys，将公钥信息粘贴进去点击Add。 4. 将私钥加到ssh-agent ssh-agent bash ssh-add ~/.ssh/[keyname] 5. 配置git git config --global user.name [fullname] 这个名字建议写全名 git config --global user.email [email] 这个email填写你的邮箱 git config --global color.ui true git config --global gui.encoding utf-8 设置git全局设置： git config --global user.name \u0026#34;your_name\u0026#34; git config --global user.email \u0026#34;your_email\u0026#34; 需要取消git的全局设置: git config --global --unset user.name git config --global --unset user.email 针对每个项目，单独设置用户名和邮箱，设置方法如下： git config user.name \u0026#34;your_name\u0026#34; git config user.email \u0026#34;your_email\u0026#34; 测试连接 ssh -T git@github.com ssh -T git@192.168.1.2 .gitignore无效的解决方法 在项目文件夹下打开git bash，执行\ngit rm -r --cached .DS_Store 这句代码的意思就是解除跟踪DS_Store，清缓存 // git rm -r --cached . 解除跟踪所有文件 git add . git commit -m \u0026#39;update .gitignore\u0026#39; init git init git add . git commit -m \u0026#34;init\u0026#34; init后传至git仓库 git remote add origin git@github.com:wmszhe/PythonTools.git git push -u origin master 日志 1.查询日志 git log 2.查指定文件的提交日志 1. 查看日志记录 git log --pretty=oneline .gitignore 2. 使用git show查看具体日志 --\u0026gt; git show \u0026lt;git提交版本号\u0026gt; \u0026lt;文件名\u0026gt; git show 03bb009eb06b16c62155206b0e5724b532820efd .gitignore 3.查询某个人的提交日志 git log --author=\u0026#34;author\u0026#34; clone git clone https://github.com/CharonChui/AndroidNote.git __AndroidNote(自定义的文件夹名) git clone ssh://zhe.wang@192.168.0.119:29418/adclient -b gte clone \u0026ndash;depth 指定克隆深度,为1即表示只克隆最近一次commit.\ngit clone xxx --depth 1 如果我们之后要把之前的历史重新再 pull 下来\n// 将浅克隆转换为完整克隆 git pull --unshallow git fetch --unshallow 安装hook,目的是在提交信息中自动创建 \u0026lsquo;Change-Id:\u0026rsquo; 标签 cd adclient scp -p -P 29418 zhe.wang@192.168.0.119:hooks/commit-msg .git/hooks/ 远程仓库 通过终端修改 查看远程仓库地址 git remote -v 修改远程仓库地址 git remote set-url origin git@github.com/xxx.git 修改项目下.git/config文件 [remote \u0026#34;origin\u0026#34;] # url = git@xxx url = git@github.com:xxx.git 查看分支 git branch git branch -a 切换分支 //本地无分支，加 -b ,相当于 git branch sdpost_dev ，git checkout sdpost_dev git checkout -b sdpost_dev //本地已有分支，直接切换 git checkout sdpost_dev //checkout远端分支 git checkout -b develop origin/develop 从某个版本代码拉取新的分支 git checkout -b newbranchname xxxxx(commit id) 创建一个没有历史记录的新分支 git checkout --orphan new_dev git add . git commit -m \u0026#34;first commit\u0026#34; // 发布到远端分支 git push origin new_dev:new_dev 修改分支名称 本地分支\ngit branch -m oldbranchname newbranchname 远程分支\n将本地分支重命名为新分支名称，然后删除远程分支，再把本地分支上传 把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名） git push origin wz-jr:wz-jr // 创建远端分支的另一种方式 git checkout -b my-test //在当前分支下创建my-test的本地分支分支 git push origin my-test //将my-test分支推送到远程 git branch --set-upstream-to=origin/my-test //将本地分支my-test关联到远程分支my-test上 git branch -a //查看远程分支 push所有分支 git push --all origin 更新分支信息 远程版本库创建了一个分支后,本地创建远程追踪分支\ngit remote update 在远程版本库上删除了某一分支,删除本地版本库上那些失效的远程追踪分支\n方法一：\n// -p, --prune prune remotes after fetching git remote update -p 方法二：\n// 查看哪些分支需要清理 git remote prune origin --dry-run // 清理 git remote prune 本地分支作为下游存在的话，还需要手动清理\ngit branch -d xx 删除分支 git branch -d gte git branch -D gte(强制删除) 删除远程分支 git push origin --delete 分支名 恢复删除的分支 git reflog(找到想要恢复的分支的散列值) git branch local-test HEAD@{2} 查看tag git tag 查看tag详细信息 git show v1.0 添加tag git tag v1.0 添加带备注的tag git tag -a v1.0 -m \u0026#34;v1.0\u0026#34; 给指定的某个commit号加tag git tag -a v1.0 9fceb02 -m \u0026#34;v1.0\u0026#34; 将tag同步到远程服务器 git push origin v1.0 git push origin --tags //推送所有tag 切换tag git checkout v1.0 获取远程版本 git fetch origin tag V1.0 删除本地tag git tag -d v1.0 删除远端tag 推送的空的同名版本到线下,达到删除线上版本的目标\ngit tag push origin :refs/tags/v1.0 查看状态 git status commit //直接填写提交日志 git commit -m \u0026#39;commit log\u0026#39; 修改commit git commit --amend pull git pull origin master pull 错误 “You asked to pull from the remote \u0026lsquo;origin\u0026rsquo;, but did not specify a branch. Because this is not the default configured remote for your current branch, you must specify a branch on the command line.” 参考：Git远程分支和refs文件详解 问题在于没有给当前分支配置merge的路径，git不知道去merge哪个分支。\n我们修改配置文件(.git/config)加入\n[branch \u0026#34;wz-jr2\u0026#34;] remote = origin merge = refs/heads/wz-jr2 这意味着每次fetch origin的时候更新所有remotes/origin的头指针到refs/heads/下面\npush git push origin master git push origin HEAD:refs/for/gte //可提交到指定位置 git push //192.168.0.119/LocalShare/pengbo/adclient develop-post:develop-post 回退git // !!! Windows下CMD中^是特殊字符，要使用时必须用双引号包括 (git reset \u0026lt;--soft||--mixed||--hard\u0026gt; HEAD\u0026#34;^\u0026#34;) // !!! 或者 git reset \u0026lt;--soft||--mixed||--hard\u0026gt; HEAD~1 git reset \u0026lt;--soft||--mixed||--hard\u0026gt; HEAD^ (回退到上一个版本) (HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100) git reset \u0026lt;--soft||--mixed||--hard\u0026gt; xxxxxxxx (回退到指定版本) 远程版本回退 git push origin HEAD --force #远程提交回退 git回退到某一历史版本后再恢复到之前版本 git reset --hard xxx git reflog (git log -g) git reset --hard xxx Your branch is behind \u0026lsquo;origin/wz-jr\u0026rsquo; by 1 commit, and can be fast-forwarded. is behind表示落后远程版本了，并且可以fast forwarded快速合并 使用git push origin wz-jr --force强制将代码推到服务器，--force使服务器不会拒绝这个更低版本的commit 撤销修改 git checkout -- file (命令git checkout -- file意思就是，把文件在工作区的修改全部撤销，这里有两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。) git reset HEAD file (把暂存区的修改撤销掉（unstage），重新放回工作区) 回退指定文件到指定版本 git log /e/dev/adclient/app/src/main/AndroidManifest.xml git reset a28887c24ed89938de7f769eb18b2555de790668 /e/dev/adclient/app/src/main/AndroidManifest.xml git checkout -- /e/dev/adclient/app/src/main/AndroidManifest.xml 重新提交 amend git add . git commit --amend( --no-edit) // git push origin gte // git push origin HEAD:refs/for/gte // 如果已经push到git仓库,amend后直接push会生成新的记录，需要--force-with-lease git push --force-with-lease origin master(安全的强制推送) 暂存/恢复 stash git stash(暂存) git stash save \u0026#34;\u0026#34; (暂存) git stash pop(apply last stash and remove it from the list) git stash list() git stash pop stash@{1}(取出指定的暂存,取出后会将对应的stash id 从stash list里删除) git stash apply stash@{1}(取出指定的暂存，取出后会继续保存stash id) git stash drop stash@{1}(删除指定的暂存) git stash clear(将栈清空) cherry-pick // 将另一个分支上的一个提交合并到本分支 git cherry-pick xxxx(commit id) // 合并多条 // \u0026lt;mark\u0026gt;注意，不包含xxx1\u0026lt;/mark\u0026gt; git cherry-pick xxx1..xxx10 // \u0026lt;mark\u0026gt;包含xxx1\u0026lt;/mark\u0026gt; git cherry-pick xxx1^..xxx10 // 继续合并 || 取消合并 git cherry-pick --continue || --abort revert git revert xxx git commit // git push origin gte git push origin HEAD:refs/for/sdpost_dev fetch/rebase 首先用git fetch返回服务器上的代码 用git rebase合并 \u0026gt; 合并冲突 \u0026gt; git add . \u0026gt; 用git rebase --continue继续没完成的合并 \u0026gt; 重新提交git commit --amend 最后就可以用git push更新到服务器上去。 git pull --rebase origin develop-post(git pull --rebase = git fetch + git rebase) 取消本次rebase git rebase --abort git bisect 查找哪一次代码提交引入了错误 参考：git bisect 命令教程\n它的原理很简单，就是将代码提交的历史，按照两分法不断缩小定位。所谓\u0026quot;两分法\u0026quot;，就是将代码历史一分为二，确定问题出在前半部分，还是后半部分，不断执行这个过程，直到范围缩小到某一次代码提交。\n// \u0026#34;终点\u0026#34;是最近的提交，\u0026#34;起点\u0026#34;是更久以前的提交 git bisect start [终点] [起点] eg: git bisect start 100 1 执行上面的命令以后，代码库就会切换到这段范围正当中的那一次提交，即50 如果没有问题，那么1-50之间是正常的，执行 git bisect good 那么Git就自动切换到后半段的中点，即50-100，即75 如果出现问题，那么50-75之间有问题，执行 git bisect bad Git就自动切换到第50次到第75次的中点（第63次提交） 重复执行上述操作，直到成功找到出问题的那一次提交为止，Git 会给出如下的提示 xxx is the first bad commit 查出问题后，执行 git bisect reset 退出查错 现在就可以开始修复错误了。 ","permalink":"https://blog.wmszhe.com/post/2019-06-15-git/","summary":"\u003cp\u003eGit相关,常用Git命令\u0026hellip;\u003c/p\u003e","title":"Git"},{"content":"👏 欢迎 👏\nTime: 2019年6月15日，周六。\n本网站通过Github Pages创建。创建过程参考GitHub Pages 搭建教程 使用 Gridea Hugo管理本网站 主题 使用hugo-PaperMod主题 本站使用hugo-theme-cleanwhite主题，经过适量修改。 本站使用Clean主题，经过适量修改。 本网站主要记录 工作笔记 日常 备忘 随缘更新 😘 Enjoy~\n","permalink":"https://blog.wmszhe.com/post/2019-06-15-hello-everyone/","summary":"\u003cp\u003e👏 欢迎 👏\u003c/p\u003e","title":"Hello EveryOne"},{"content":"本网站创建于2019年6月15日\n这是我的个人网站，用了记录个人生活，工作经验，自用工具\n本网站通过Github Pages创建。创建过程参考GitHub Pages 搭建教程 使用 Gridea Hugo管理本网站 主题 使用hugo-PaperMod主题，经过适量修改。 本站使用hugo-theme-cleanwhite主题，经过适量修改。 本站使用Clean主题，经过适量修改。 本网站主要记录 工作笔记 日常 备忘 随缘更新 ","permalink":"https://blog.wmszhe.com/about/","summary":"本网站创建于2019年6月15日 这是我的个人网站，用了记录个人生活，工作经验，自用工具 本网站通过Github Pages创建。创建过程参考Gi","title":"关于"}]